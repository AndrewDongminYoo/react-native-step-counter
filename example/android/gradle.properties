# Project-wide Gradle settings.
# IDE (e.g. Android Studio) users:
# Gradle settings configured through the IDE *will override*
# any settings specified in this file.
# For more details on how to configure your build environment visit
# http://www.gradle.org/docs/current/userguide/build_environment.html
# Specifies the JVM arguments used for the daemon process.
# The setting is particularly useful for tweaking memory settings.
# -Xmx: The maximum heap size of the JVM.
# -XX:MaxMetaspaceSize: The maximum size of the meta space.
# -XX:UseParallelGC: Use the parallel garbage collector.
org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=2048m -XX:+UseParallelGC
# When configured, Gradle will run in incubating a parallel mode.
# This option should only be used with decoupled projects. More details, visit
# @see http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
# org.gradle.parallel=true
# AndroidX package structure to make it clearer which packages are bundled with the
# Android operating system, and which are packaged with your app's APK
# @see https://developer.android.com/topic/libraries/support-library/androidx-rn
# Automatically convert third-party libraries to use AndroidX
android.useAndroidX=true
# Since most projects use AndroidX libraries directly,
# you can remove the Jetifier flag for better build performance.
# To remove the Jetifier flag, set this property to false.
# @see https://developer.android.com/studio/command-line/jetifier
android.enableJetifier=false
# Version of flipper SDK to use with React Native
# @see https://fbflipper.com/docs/features/react-native
FLIPPER_VERSION=0.183.0
FRESCO_VERSION=0.182.0
# Use this property to specify which architecture you want to build.
# You can also override it from the CLI using
# ./gradlew <task> -PreactNativeArchitectures=x86_64
# The default value is armeabi-v7a,arm64-v8a,x86,x86_64
# @see https://developer.android.com/ndk/guides/abis?hl=ko#sa
reactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64
# Use this property to enable support to the new architecture.
# This will allow you to use TurboModules and the Fabric renders in
# your application. You should enable this flag either if you want
# to write custom TurboModules/Fabric components OR use libraries that
# are providing them.
# @see
# TODO: Remove this flag once we have a stable release of Fabric.
newArchEnabled=true
# Use this property to enable or disable the Hermes JS engine.
# If set to false, you will be using JSC instead.
# TODO: Remove this flag once we have a stable release of Hermes.
hermesEnabled=true
# A dependency on the standard library (stdlib) is added automatically to each source set.
# The version of the standard library used is the same as the version of the Kotlin Gradle plugin.
# For platform-specific source sets, the corresponding platform-specific variant
# of the library is used, while a common standard library is added to the rest.
# The Kotlin Gradle plugin selects the appropriate JVM standard library depending
# on the compilerOptions.jvmTarget compiler option of your Gradle build script.
kotlin.stdlib.default.dependency=false
# By default, Gradle does not use the configuration cache.
# To enable the cache at build time, use the configuration-cache flag:
# > gradle --configuration-cache build
# https://docs.gradle.org/current/userguide/configuration_cache.html
org.gradle.unsafe.configuration-cache=true
# Ignoring problems
# By default, Gradle will fail the build if any configuration cache problems are encountered.
# When gradually improving your plugin or build logic to support the configuration cache it
# can be useful to temporarily turn issues into warnings.
# This can be done from the command line:
# > gradle --configuration-cache-problems=warn
# TODO: Use this flag carefully, in case some plugins are not fully compatible.
org.gradle.unsafe.configuration-cache-problems=warn
